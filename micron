#! /usr/bin/env python

'''
Schedule jobs
'''

import sys
import os.path
import argparse
import time
from datetime import datetime
import threading
import shlex, subprocess
import logging
import parsedatetime.parsedatetime
import yaml

TIMEFMT = '%d %b %Y %H:%M:%S'
LOGFMT = '%(asctime)s %(levelname)s %(message)s'
EXITFMT = "Job '%s' exited with %d"

# TODO Notification windows
# TODO D-Bus events

def dump(runs, directory):
    with open(directory + '/runs.yaml', 'w') as fhl:
        yaml.safe_dump(runs, fhl, default_flow_style=False)

def run(name, job):
    # Run process
    try:
        cwd = os.path.expanduser(job['cwd'])
    except KeyError:
        cwd = None
    proc = subprocess.Popen(job['command'], stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE, shell=True, cwd=cwd)
    out, err = proc.communicate()

    # Print output
    out = out.strip()
    err = err.strip()
    if out:
        logging.info('%s:\n%s', name, out)
    if err:
        logging.warning('%s:\n%s', name, err)

    # Report status
    if proc.returncode == 0:
        logging.info(EXITFMT, name, proc.returncode)
    else:
        logging.warning(EXITFMT, name, proc.returncode)

def main():
    # Arguments
    parser = argparse.ArgumentParser('Schedule jobs.')
    parser.add_argument('-d', '--directory', type=os.path.expanduser,
                        default='~/.micron')
    args = parser.parse_args()

    # Create directory
    try:
        os.mkdir(args.directory)
    except OSError:
        pass

    # Logging
    logging.basicConfig(level=logging.INFO, format=LOGFMT)

    # Create datetime parser
    parser = parsedatetime.parsedatetime.Calendar()

    # Create thread list
    threads = {}

    # Loop
    try:
        logging.info('Starting main loop')
        while True:
            # Load jobs from file
            try:
                with open(args.directory + '/jobs.yaml') as fhl:
                    jobs = yaml.load(fhl, Loader=yaml.BaseLoader)
            except IOError, exc:
                logging.error(exc)
                return 1

            # Load last runs
            try:
                with open(args.directory + '/runs.yaml') as fhl:
                    runs = yaml.load(fhl, Loader=yaml.BaseLoader)
                assert runs is not None
            except (IOError, AssertionError):
                runs = {}

            # Run jobs when applicable
            for job in jobs:
                now = datetime.now()

                # Is the job running?
                try:
                    if threads[job].isAlive():
                        continue
                    elif 'end' not in runs[job]:
                        runs[job]['end'] = now.strftime(TIMEFMT)
                except KeyError, exc:
                    pass

                # When would the next run be?
                try:
                    nextrun = parser.parse('%s from %s' % (jobs[job]['every'],
                                           runs[job]['end']))[0]
                    nextrun = time.mktime(nextrun)
                except KeyError, exc:
                    nextrun = 0
                    runs[job] = {}

                # Run the job?
                if now > datetime.fromtimestamp(nextrun):
                    logging.info("Running job '%s'", job)
                    try:
                        del runs[job]['end']
                    except KeyError:
                        pass
                    threads[job] = threading.Thread(target=run,
                                                    args=(job, jobs[job]))
                    threads[job].start()

            dump(runs, args.directory)
            time.sleep(2)
    except KeyboardInterrupt:
        logging.info('Exited main loop')

if __name__ == '__main__':
    sys.exit(main())
